{"ast":null,"code":"var _jsxFileName = \"/home/jralvarezwindey/Escritorio/food/client/src/components/Paginator/Paginator.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setPage } from '../../redux/actions.js';\nimport * as S from './Paginator.styled.js';\nimport { colors } from '../GlobalStyle.styled.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Paginator() {\n  _s();\n\n  const [pages, setPages] = useState([]);\n  const {\n    displayed\n  } = useSelector(state => state.recipes);\n  const currentPage = useSelector(state => state.recipesDisplayParameters.page);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    function paginatorButtonsGenerator(recipes) {\n      const pages = [];\n      let i = 0;\n\n      while (recipes.length > 0) {\n        recipes = recipes.slice(9);\n        pages.push(i++);\n      }\n\n      return pages;\n    }\n\n    setPages(paginatorButtonsGenerator([...displayed]));\n  }, [displayed]);\n\n  function handleClick(newCurrentPage) {\n    dispatch(setPage(newCurrentPage));\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(S.Paginator, {\n    children: pages.length > 1 && pages.map((page, index) => {\n      const selectedButtonStyle = index === currentPage ? {\n        backgroundColor: colors.RED,\n        filter: 'brightness(100%)'\n      } : undefined;\n      return /*#__PURE__*/_jsxDEV(S.Button, {\n        style: selectedButtonStyle,\n        onClick: () => handleClick(index),\n        children: index + 1\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Paginator, \"Ey1gWsN8Hqa6giUWULyqjyd/Xpg=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = Paginator;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"Paginator\");","map":{"version":3,"sources":["/home/jralvarezwindey/Escritorio/food/client/src/components/Paginator/Paginator.js"],"names":["React","useEffect","useState","useDispatch","useSelector","setPage","S","colors","Paginator","pages","setPages","displayed","state","recipes","currentPage","recipesDisplayParameters","page","dispatch","paginatorButtonsGenerator","i","length","slice","push","handleClick","newCurrentPage","map","index","selectedButtonStyle","backgroundColor","RED","filter","undefined"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,OAAO,KAAKC,CAAZ,MAAmB,uBAAnB;AACA,SAASC,MAAT,QAAuB,0BAAvB;;AAEA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAClC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAES,IAAAA;AAAF,MAAgBP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACC,OAAhB,CAAjC;AACA,QAAMC,WAAW,GAAGV,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACG,wBAAN,CAA+BC,IAAzC,CAA/B;AACA,QAAMC,QAAQ,GAAGd,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,aAASiB,yBAAT,CAAmCL,OAAnC,EAA4C;AAC1C,YAAMJ,KAAK,GAAG,EAAd;AACA,UAAIU,CAAC,GAAG,CAAR;;AACA,aAAON,OAAO,CAACO,MAAR,GAAiB,CAAxB,EAA2B;AACzBP,QAAAA,OAAO,GAAGA,OAAO,CAACQ,KAAR,CAAc,CAAd,CAAV;AACAZ,QAAAA,KAAK,CAACa,IAAN,CAAWH,CAAC,EAAZ;AACD;;AACD,aAAOV,KAAP;AACD;;AACDC,IAAAA,QAAQ,CAACQ,yBAAyB,CAAC,CAAC,GAAGP,SAAJ,CAAD,CAA1B,CAAR;AACD,GAXQ,EAWN,CAACA,SAAD,CAXM,CAAT;;AAaA,WAASY,WAAT,CAAqBC,cAArB,EAAqC;AACnCP,IAAAA,QAAQ,CAACZ,OAAO,CAACmB,cAAD,CAAR,CAAR;AACD;;AAAA;AAED,sBACE,QAAC,CAAD,CAAG,SAAH;AAAA,cACIf,KAAK,CAACW,MAAN,GAAe,CAAf,IAAoBX,KAAK,CAACgB,GAAN,CAAU,CAACT,IAAD,EAAOU,KAAP,KAAiB;AAC/C,YAAMC,mBAAmB,GAAGD,KAAK,KAAKZ,WAAV,GACxB;AAAEc,QAAAA,eAAe,EAAErB,MAAM,CAACsB,GAA1B;AAA+BC,QAAAA,MAAM,EAAE;AAAvC,OADwB,GAExBC,SAFJ;AAGA,0BACE,QAAC,CAAD,CAAG,MAAH;AAEE,QAAA,KAAK,EAAGJ,mBAFV;AAGE,QAAA,OAAO,EAAG,MAAMJ,WAAW,CAACG,KAAD,CAH7B;AAAA,kBAIIA,KAAK,GAAG;AAJZ,SACQA,KADR;AAAA;AAAA;AAAA;AAAA,cADF;AAQD,KAZqB;AADxB;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;GAxCuBlB,S;UAEAJ,W,EACFA,W,EACHD,W;;;KAJKK,S;AAwCvB","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setPage } from '../../redux/actions.js';\nimport * as S from './Paginator.styled.js';\nimport { colors } from '../GlobalStyle.styled.js';\n\nexport default function Paginator() {\n  const [pages, setPages] = useState([]);\n  const { displayed } = useSelector(state => state.recipes);\n  const currentPage = useSelector(state => state.recipesDisplayParameters.page);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    function paginatorButtonsGenerator(recipes) {\n      const pages = [];\n      let i = 0;\n      while (recipes.length > 0) {\n        recipes = recipes.slice(9);\n        pages.push(i++)\n      }\n      return pages;\n    }\n    setPages(paginatorButtonsGenerator([...displayed]))\n  }, [displayed]);\n  \n  function handleClick(newCurrentPage) {\n    dispatch(setPage(newCurrentPage));\n  };\n\n  return (\n    <S.Paginator> \n      { pages.length > 1 && pages.map((page, index) => {\n        const selectedButtonStyle = index === currentPage \n          ? { backgroundColor: colors.RED, filter: 'brightness(100%)' }\n          : undefined;\n        return (\n          <S.Button \n            key={ index }\n            style={ selectedButtonStyle }\n            onClick={ () => handleClick(index) }>\n            { index + 1}\n          </S.Button>\n        );\n      }) }\n    </S.Paginator>\n  )\n};\n\n\n\n"]},"metadata":{},"sourceType":"module"}