{"ast":null,"code":"import { GET_CARDS, GET_ALL_FILTERS, CHANGE_APPLIED_FILTERS, CHANGE_CURRENT_PAGE, FILTER_CARDS, SORT_CARDS } from '../actions';\nconst initialState = {\n  query: '',\n  cards: [],\n  allFilters: [],\n  appliedFilters: [],\n  currentPage: 0,\n  filteredCards: [],\n  sortedCards: [],\n  sortCriteria: 'none'\n};\nexport default function reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (type) {\n    case GET_CARDS:\n      payload.cards[0] = payload.cards[0].map(dbRecipe => ({ ...dbRecipe,\n        diets: dbRecipe.diets.map(diet => diet.name)\n      }));\n      return { ...state,\n        query: payload.query,\n        cards: [...payload.cards[0], ...payload.cards[1]],\n        sortedCards: [...payload.cards[0], ...payload.cards[1]],\n        currentPage: 0\n      };\n\n    case GET_ALL_FILTERS:\n      return { ...state,\n        allFilters: payload\n      };\n\n    case CHANGE_APPLIED_FILTERS:\n      return { ...state,\n        appliedFilters: changeAppliedFiltersManager([...state.appliedFilters], payload)\n      };\n\n    case CHANGE_CURRENT_PAGE:\n      return { ...state,\n        currentPage: payload\n      };\n\n    case FILTER_CARDS:\n      return { ...state,\n        filteredCards: filterCardsManager([...state.sortedCards], [...state.appliedFilters])\n      };\n\n    case SORT_CARDS:\n      return { ...state,\n        currentPage: 0,\n        filteredCards: sortCardsManager([...state.filteredCards], payload),\n        sortedCards: sortCardsManager([...state.cards], payload),\n        sortCriteria: payload\n      };\n\n    default:\n      return { ...state\n      };\n  }\n}\n;\n\nfunction changeAppliedFiltersManager(appliedFilters, filter) {\n  appliedFilters.includes(filter) ? appliedFilters.splice(appliedFilters.indexOf(filter), 1) : appliedFilters.push(filter);\n  return appliedFilters;\n}\n\nfunction filterCardsManager(cards, appliedFilters) {\n  return cards.filter(card => {\n    return appliedFilters.every(filter => card.diets.includes(filter));\n  });\n}\n\n;\n\nfunction sortCardsManager(array, sortCriteria) {\n  switch (sortCriteria) {\n    case 'az':\n      return array.sort((x, y) => x.title.localeCompare(y.title));\n\n    case 'za':\n      return array.sort((x, y) => y.title.localeCompare(x.title));\n\n    case 'score':\n      return array.sort((x, y) => y.score - x.score);\n\n    default:\n      return array;\n  }\n}\n\n;","map":{"version":3,"sources":["/home/jralvarezwindey/Escritorio/henry-ip-food/client/src/reducer/index.js"],"names":["GET_CARDS","GET_ALL_FILTERS","CHANGE_APPLIED_FILTERS","CHANGE_CURRENT_PAGE","FILTER_CARDS","SORT_CARDS","initialState","query","cards","allFilters","appliedFilters","currentPage","filteredCards","sortedCards","sortCriteria","reducer","state","type","payload","map","dbRecipe","diets","diet","name","changeAppliedFiltersManager","filterCardsManager","sortCardsManager","filter","includes","splice","indexOf","push","card","every","array","sort","x","y","title","localeCompare","score"],"mappings":"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","sourcesContent":["import { GET_CARDS, GET_ALL_FILTERS, CHANGE_APPLIED_FILTERS, CHANGE_CURRENT_PAGE, FILTER_CARDS, SORT_CARDS } from '../actions';\n\nconst initialState = {\n  query: '',\n  cards: [],\n  allFilters: [],\n  appliedFilters: [],\n  currentPage: 0,\n  filteredCards: [],\n  sortedCards: [],\n  sortCriteria: 'none',\n};\n\nexport default function reducer(state = initialState, { type, payload}) {\n  switch(type) {\n    case GET_CARDS: \n      payload.cards[0] = payload.cards[0].map(dbRecipe => ({...dbRecipe, diets: dbRecipe.diets.map(diet => diet.name)}))\n      return {\n        ...state,\n        query: payload.query,\n        cards: [...payload.cards[0], ...payload.cards[1]],\n        sortedCards: [...payload.cards[0], ...payload.cards[1]],\n        currentPage: 0,\n      };\n\n    case GET_ALL_FILTERS:\n      return {\n        ...state,\n        allFilters: payload,\n      }\n\n    case CHANGE_APPLIED_FILTERS: \n      return {\n        ...state,\n        appliedFilters: changeAppliedFiltersManager([...state.appliedFilters], payload)\n      }\n\n    case CHANGE_CURRENT_PAGE:\n      return {\n        ...state,\n       currentPage: payload,\n      }\n\n    case FILTER_CARDS:\n      return {\n        ...state,\n        filteredCards: filterCardsManager([...state.sortedCards], [...state.appliedFilters])\n      }\n\n    case SORT_CARDS:\n      return {\n        ...state,\n        currentPage: 0,\n        filteredCards: sortCardsManager([...state.filteredCards], payload),\n        sortedCards: sortCardsManager([...state.cards], payload),\n        sortCriteria: payload,\n      }\n\n    default:\n      return {\n        ...state,\n      };\n  }\n};\n\nfunction changeAppliedFiltersManager(appliedFilters, filter) {\n  appliedFilters.includes(filter) \n    ? appliedFilters.splice(appliedFilters.indexOf(filter), 1) \n    : appliedFilters.push(filter)\n  return appliedFilters;\n}\n\nfunction filterCardsManager(cards, appliedFilters) {\n  return cards.filter(card => {\n    return appliedFilters.every(filter => card.diets.includes(filter))\n  })\n};\n\nfunction sortCardsManager(array, sortCriteria) {\n  switch(sortCriteria) {\n    case 'az': return array.sort((x, y) => x.title.localeCompare(y.title));\n    case 'za': return array.sort((x, y) => y.title.localeCompare(x.title));\n    case 'score': return array.sort((x, y) => y.score - x.score);\n    default: return array;\n  }\n};\n\n"]},"metadata":{},"sourceType":"module"}