{"ast":null,"code":"var _jsxFileName = \"/home/jralvarezwindey/Escritorio/food/client/src/components/LandingPage/LandingPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Loading from '../Loading/Loading.js';\nimport * as S from './LandingPage.styled.js';\nimport landingImage from './media/landing.jpg';\nimport createRecipeImage from './media/create-recipe.jpg';\nimport recipeDetailImage from './media/recipe-detail.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LandingPage() {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n  const sources = [landingImage, createRecipeImage, recipeDetailImage];\n  useEffect(() => {\n    (async function cacheImages() {\n      await Promise.all(sources.map(source => {\n        return new Promise((res, rej) => {\n          const image = new Image();\n          image.src = source;\n          image.onLoad = res();\n          image.onError = rej();\n        });\n      }));\n      setLoading(false);\n    })();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 23\n  }, this);else return /*#__PURE__*/_jsxDEV(S.LandingPage, {\n    children: /*#__PURE__*/_jsxDEV(S.Button, {\n      onClick: () => navigate('/'),\n      children: \" LET'S COOK! \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LandingPage, \"y3JVj3H+DZT4skK8GcW7cVdM7zQ=\", false, function () {\n  return [useNavigate];\n});\n\n_c = LandingPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LandingPage\");","map":{"version":3,"sources":["/home/jralvarezwindey/Escritorio/food/client/src/components/LandingPage/LandingPage.js"],"names":["React","useState","useEffect","useNavigate","Loading","S","landingImage","createRecipeImage","recipeDetailImage","LandingPage","loading","setLoading","navigate","sources","cacheImages","Promise","all","map","source","res","rej","image","Image","src","onLoad","onError"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAO,KAAKC,CAAZ,MAAmB,yBAAnB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,iBAAP,MAA8B,2BAA9B;AACA,OAAOC,iBAAP,MAA8B,2BAA9B;;AAEA,eAAe,SAASC,WAAT,GAAsB;AAAA;;AACnC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAMW,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,OAAO,GAAG,CAACP,YAAD,EAAeC,iBAAf,EAAkCC,iBAAlC,CAAhB;AAGAN,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,eAAeY,WAAf,GAA6B;AAC5B,YAAMC,OAAO,CAACC,GAAR,CAAYH,OAAO,CAACI,GAAR,CAAYC,MAAM,IAAI;AACtC,eAAO,IAAIH,OAAJ,CAAY,CAACI,GAAD,EAAMC,GAAN,KAAc;AAC/B,gBAAMC,KAAK,GAAG,IAAIC,KAAJ,EAAd;AACAD,UAAAA,KAAK,CAACE,GAAN,GAAYL,MAAZ;AACAG,UAAAA,KAAK,CAACG,MAAN,GAAeL,GAAG,EAAlB;AACAE,UAAAA,KAAK,CAACI,OAAN,GAAgBL,GAAG,EAAnB;AACD,SALM,CAAP;AAMD,OAPiB,CAAZ,CAAN;AAQAT,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAVD;AAWD,GAZQ,EAYN,EAZM,CAAT;AAcA,MAAID,OAAJ,EAAa,oBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAAP,CAAb,KACK,oBACH,QAAC,CAAD,CAAG,WAAH;AAAA,2BACE,QAAC,CAAD,CAAG,MAAH;AAAU,MAAA,OAAO,EAAG,MAAKE,QAAQ,CAAC,GAAD,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADG;AAKN;;GA1BuBH,W;UAELN,W;;;KAFKM,W","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Loading from '../Loading/Loading.js'\nimport * as S from './LandingPage.styled.js';\nimport landingImage from './media/landing.jpg';\nimport createRecipeImage from './media/create-recipe.jpg';\nimport recipeDetailImage from './media/recipe-detail.jpg';\n\nexport default function LandingPage(){\n  const [loading, setLoading] = useState(true)\n  const navigate = useNavigate();\n  const sources = [landingImage, createRecipeImage, recipeDetailImage]\n\n  \n  useEffect(() => {\n    (async function cacheImages() {\n      await Promise.all(sources.map(source => {\n        return new Promise((res, rej) => {\n          const image = new Image();\n          image.src = source;\n          image.onLoad = res();\n          image.onError = rej();\n        })\n      }))\n      setLoading(false);\n    })()\n  }, [])\n\n  if (loading) return <Loading/>\n  else return(\n    <S.LandingPage> \n      <S.Button onClick={ ()=> navigate('/') }> LET'S COOK! </S.Button> \n    </S.LandingPage>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}